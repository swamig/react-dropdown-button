{
  "name": "region",
  "version": "2.1.2",
  "description": "A helper to work with rectangular regions in the DOM",
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "test-w": "make test-w",
    "test-debug": "mocha --debug-brk",
    "dist": "webpack --progress --colors --config dist.config.js",
    "dist.min": "webpack --progress --colors --optimize-minimize --optimize-occurence-order --optimize-dedupe --config dist.min.config.js",
    "build": "npm run dist && npm run dist.min"
  },
  "devDependencies": {
    "mocha": "~1.21.0",
    "should": "~4.0.4",
    "webpack": "^1.4.13",
    "webpack-dev-server": "^1.6.5"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/radubrehar/region.git"
  },
  "keywords": [
    "region",
    "dom",
    "rectangle",
    "size",
    "area",
    "intersection",
    "element",
    "html",
    "coordinates"
  ],
  "author": {
    "name": "Radu Brehar"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/radubrehar/region/issues"
  },
  "dependencies": {
    "hasown": "~1.x.x",
    "newify": "^1.1.9",
    "object-assign": "^2.0.0"
  },
  "readme": "region\n======\n\nA helper to work with rectangular regions in the DOM\n\n## Install\n\n```sh\n$ npm install region --save\n```\n\n## Usage\n\n```js\nvar Region = require('region')\n\nvar region = Region({\n    top: 10,\n    left: 10,\n    width: 50,\n    height: 60\n})\n\nregion.getRight() == 60\nregion.getBottom() == 70\n```\n\n## API\n\n### Instantiation\n\nYou can create a new Region by calling the function returned by ```require('region')```. You can call it as a constructor if you want.\n\n```js\nvar Region = require('region')\n\nnew Region({\n    top: 10,\n    left: 10\n    //either width,height\n    //or right, bottom\n    width: 10,\n    height: 10\n})\n```\n\nor\n\n```js\nvar Region = require('region')\nvar r = Region({\n    top: 10,\n    left: 10,\n    right: 20,\n    bottom: 20\n})\n```\n\nYou can instantiate a ```Region``` from a DOM node, using Region.fromDOM (NOTE: uses dom.offsetWidth/Height/Left/Top for getting coordinates)\n\n```js\nvar r = Region.fromDOM(document.body)\n```\n\n### Getters\n\n * get - returns an object with {top, left, bottom, right}\n * getWidth\n * getHeight\n * getLeft\n * getTop\n * getRight\n * getBottom\n * getPosition - returns an object with {left, top}\n * getSize - returns an object with {width, height}\n\n### containsPoint(x,y) or containsPoint({x,y}) : Boolean\n\n```js\nvar r = Region({\n    top: 10,\n    left: 10,\n    width: 10,\n    height: 10\n})\n\nr.containsPoint(15, 10) == true\nr.containsPoint({x: 10, y: 10}) == true\n```\n\n### equals(r): Boolean\n\nReturns true if this region equals the region (or the object) given as the first param\nvar r = Region({top: 10, left: 10, bottom: 20, right: 20 })\n\nr.equals({top: 10, left: 10, bottom: 20, right: 20 }) == true\n\n### equalsPosition({top, left}): Boolean\nReturns true if this region has top, left equal to the given coordinates\n\n### equalsSize({width, height}): Boolean\n\nReturns true if this region has the same size as the given region or object\n\n```js\nvar coords = { top: 10, left: 10, width: 100, height: 100 }\nvar r = Region(coords)\nr.equalsSize(coords) == true\nr.equalsSize(r.clone()) == true\n```\n### getIntersection(Region): Region/false\n\nReturns the region resulted by intersecting this region with the given region. If no intersection, returns false\n\n### clone: Region\n\nReturns a new region instance with the same coordinates\n```js\nvar r = new Region({left: 10, right: 10, width: 10, height: 20})\nr.clone().equals(r)\n```\n\n## Tests\n\n```sh\n$ make\n```\n\nWatch mode\n\n```sh\n$ make test-w\n```\n\n## License\n\n```\nMIT\n```",
  "readmeFilename": "README.md",
  "gitHead": "3d0c8de3e1e1bc4ac19f31cda162d087b8e78861",
  "homepage": "https://github.com/radubrehar/region",
  "_id": "region@2.1.2",
  "_shasum": "cfd95868afbc49e4c7a053b677bc5a0985c29afa",
  "_from": "region@>=2.1.2 <3.0.0"
}
